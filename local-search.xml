<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo 博客站点的备份与恢复</title>
    <link href="/2022/10/21/Hexo-%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/"/>
    <url>/2022/10/21/Hexo-%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</url>
    
    <content type="html"><![CDATA[<p>费劲建好的博客站点肯定是不希望因为一些奇怪的原因导致站点崩溃，导致最后丢失数据。</p><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>对于我来说备份的选择就是直接使用 Git 进行备份，就很方便。只需要排除一些文件就好了。</p><h3 id="需要保留的文件"><a href="#需要保留的文件" class="headerlink" title="需要保留的文件"></a>需要保留的文件</h3><p>先来看一下正常情况下一个 Hexo 博客站点包含以下文件目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">.<br>├── _config.fluid.yml   <span class="hljs-comment"># 主题配置文件</span><br>├── _config.yml         <span class="hljs-comment"># Hexo 配置文件</span><br>├── db.json             <span class="hljs-comment"># 不明，但是不重要，是自动生成的</span><br>├── .deploy_git         <span class="hljs-comment"># 最终由插件 hexo-deploy-git 上传的文件</span><br>├── .gitignore          <span class="hljs-comment"># git 排除文件</span><br>├── node_modules        <span class="hljs-comment"># npm 包文件</span><br>├── package.json        <span class="hljs-comment"># 包配置文件</span><br>├── package-lock.json   <span class="hljs-comment"># 包锁定文件</span><br>├── public              <span class="hljs-comment"># Hexo 生成的静态网页</span><br>├── scaffolds           <span class="hljs-comment"># 模板文件</span><br>├── <span class="hljs-built_in">source</span>              <span class="hljs-comment"># 原始文章目录</span><br>├── themes              <span class="hljs-comment"># 主题目录</span><br>└── yarn.lock           <span class="hljs-comment"># yarn 锁定文件</span><br></code></pre></td></tr></table></figure><p>其中 <code>public</code> 是执行 <code>hexo g</code> 静态生成的，所以可以直接无视，不用备份。<code>source</code> 是存放文章原始记录的位置，需要备份。</p><p><code>themes</code> 是存放主题文件的位置，如果你使用 <code>git</code> 来下载的主题文件，这里建议不用备份这个目录，在需要恢复的时候直接使用 git 来重新下载就好。</p><p>其中 <code>scaffolds</code> 目录是存放模板文件的位置。如果有大量模板建议 git 上传。</p><h4 id="正式备份的文件"><a href="#正式备份的文件" class="headerlink" title="正式备份的文件"></a>正式备份的文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">├── _config.fluid.yml   <span class="hljs-comment"># 主题配置文件</span><br>├── _config.yml         <span class="hljs-comment"># Hexo 配置文件</span><br>├── package.json        <span class="hljs-comment"># 包配置文件</span><br>├── scaffolds           <span class="hljs-comment"># 模板文件</span><br>├── <span class="hljs-built_in">source</span>              <span class="hljs-comment"># 原始文章目录</span><br>├── .gitignore          <span class="hljs-comment"># git 排除文件</span><br>└── themes              <span class="hljs-comment"># 主题目录</span><br></code></pre></td></tr></table></figure><p>我们直接在 GitHub 上开一个仓库，然后将这写文件上传上去就好了。下面附上一个 <code>.gitigonre</code> 文件的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs .gitigonre">.DS_Store<br>Thumbs.db<br>db.json<br>*.log<br>node_modules/<br>public/<br>.deploy*/<br>_multiconfig.yml<br>package-lock.json<br>yarn.lock<br>.github<br></code></pre></td></tr></table></figure><h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><p>假设你的 Hexo 出现了问题，需要你恢复备份。</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>首先需要将你的 Hexo 备份从存储库中拉下来，之后进入 Hexo 目录执行 <code>npm install</code> 就可以自动处理依赖。</p><p>如果你没有安装 Hexo-cli 需要安装以下，并设置好的主题目录，之后就可以正常执行了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpEL类型转换错误探究</title>
    <link href="/2022/10/20/SpEL%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E9%94%99%E8%AF%AF%E6%8E%A2%E7%A9%B6/"/>
    <url>/2022/10/20/SpEL%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E9%94%99%E8%AF%AF%E6%8E%A2%E7%A9%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在一次开发SpEL的过程中，触发了这个错误。<br>原原始代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">parse</span><span class="hljs-params">(String expression, AnnotatedElementKey methodKey, EvaluationContext evalContext, Class&lt;T&gt; tClass)</span> &#123;<br>    <span class="hljs-keyword">return</span> getExpression(<span class="hljs-built_in">this</span>.messageCache, methodKey, expression).getValue(evalContext, tClass);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面这部分比较重要的就是后面<code>getValue(context, class)</code>这部分。这部分是由<br><code>org.springframework.expression</code>提供的评估表达式接口。</p><p>错误堆栈如下：(只截取了比较重要的部分）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [io.github.cgglyle.boson.graviton.test.entity.TestEntity] to type [java.lang.String]<br>at org.springframework.core.convert.support.GenericConversionService.handleConverterNotFound(GenericConversionService.java:322) ~[spring-core-5.3.23.jar:5.3.23]<br>at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:195) ~[spring-core-5.3.23.jar:5.3.23]<br>at org.springframework.expression.spel.support.StandardTypeConverter.convertValue(StandardTypeConverter.java:82) ~[spring-expression-5.3.23.jar:5.3.23]<br>at org.springframework.expression.common.ExpressionUtils.convertTypedValue(ExpressionUtils.java:57) ~[spring-expression-5.3.23.jar:5.3.23]<br>at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:311) ~[spring-expression-5.3.23.jar:5.3.23]<br>at org.springframework.expression.common.CompositeStringExpression.getValue(CompositeStringExpression.java:108) ~[spring-expression-5.3.23.jar:5.3.23]<br>at org.springframework.expression.common.CompositeStringExpression.getValue(CompositeStringExpression.java:121) ~[spring-expression-5.3.23.jar:5.3.23]<br>at io.github.cgglyle.boson.graviton.service.GravitonLogExpressionEvaluator.parse(GravitonLogExpressionEvaluator.java:58) ~[classes/:na]<br>at io.github.cgglyle.boson.graviton.service.GravitonLogValueParser.lambda$parserOf$0(GravitonLogValueParser.java:68) ~[classes/:na]<br>at io.github.cgglyle.boson.graviton.service.GravitonLogValueParser.parser(GravitonLogValueParser.java:62) ~[classes/:na]<br>at io.github.cgglyle.boson.graviton.aop.GravitonLogAspect.doAfterReturning(GravitonLogAspect.java:128) ~[classes/:na]<br></code></pre></td></tr></table></figure><p>经过堆栈跟踪发现是由</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">at org.springframework.expression.common.CompositeStringExpression.getValue(CompositeStringExpression.java:121) ~[spring-expression-5.3.23.jar:5.3.23]<br></code></pre></td></tr></table></figure><p>这个类直接引发的异常，当getValue被触发后最终会走到<code>CompositeStringExpression#getvalue(context)</code>方法上&#96;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getValue</span><span class="hljs-params">(EvaluationContext context, <span class="hljs-meta">@Nullable</span> Class&lt;T&gt; expectedResultType)</span><br>      <span class="hljs-keyword">throws</span> EvaluationException &#123;<br><br>   <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> getValue(context);<br>   <span class="hljs-keyword">return</span> ExpressionUtils.convertTypedValue(context, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypedValue</span>(value), expectedResultType);<br>&#125;<br></code></pre></td></tr></table></figure><p>这是同类中的<code>getvalue(context)</code>方法，在这个类中会在进行解析的过程中强制把所有类型全转换成<code>String.class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getValue</span><span class="hljs-params">(EvaluationContext context)</span> <span class="hljs-keyword">throws</span> EvaluationException &#123;<br>   <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>   <span class="hljs-keyword">for</span> (Expression expression : <span class="hljs-built_in">this</span>.expressions) &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> expression.getValue(context, String.class);<br>      <span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>) &#123;<br>         sb.append(value);<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">return</span> sb.toString();<br>&#125;<br></code></pre></td></tr></table></figure><p>具体如何走到这里的还没有经过详细研究</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人生数据管理</title>
    <link href="/2022/10/20/%E4%BA%BA%E7%94%9F%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/"/>
    <url>/2022/10/20/%E4%BA%BA%E7%94%9F%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很久以来，人生都是“<strong>流式</strong>”的，会忘记十年前，五年前，甚至前一秒脑海中想做的事情。当然，这些都是在肉脑中存在的“数据”，既不好“导出”也不好记录，想把脑中的“数据”转化成可以在系统中看见的数据只能手动输入或者语音，这并不是一个方便的方法，当然现在是唯一的方法，毕竟现在还没有赛博世界中的“脑机接口”，我倒是很想向往那种生活。有了脑机接口就可以实现一些天马行空的想象了，相信不远的将来，也许大概可能或许可以看到呢？</p><h2 id="序章"><a href="#序章" class="headerlink" title="序章"></a>序章</h2><p>说了这么多，跟<strong>人生数据管理</strong>有什么关系呢？没有强关联，但是它促使我去完成一件目前可以完成的事情。获取周围可以获取的数据，<del>这好像是一句废话</del>。让我们联想一下收集周围所有数据可以为自己带来什么好处：</p><ul><li>最明显不过的好处就是可以检索你过去的记录，比如去年今天你做了什么，周围的温度如何，你是什么心情，等等等。</li><li>可以分析你这段时间的变化：比如你发现你胖了，但是不知道为什么，就可以去翻一翻是不是之前吃得多，动的少，还花销超标了。</li><li>还有很多，人际关系变化，财产变化，审美变化，工资与心情的关系，一个月中哪天心情比较好，等等。</li></ul><p><del>不觉得这很酷么？作为一名理工男我觉得这太酷了，后面忘了</del>。这确实很有趣，是一个有趣的项目。但是难点很快就出现了，我们应该如何去搜集这些数据呢？总不能一个一个手工录入吧，怕是没写完第一天的数据，你就撂挑子不干了。我们肯定要找到一种<strong>全自动</strong>的方式来处理这些事情，我们只需要处理一些像是日记，心情一样的记录就好了。</p><h2 id="需要记录的数据"><a href="#需要记录的数据" class="headerlink" title="需要记录的数据"></a>需要记录的数据</h2><h3 id="账单"><a href="#账单" class="headerlink" title="账单"></a>账单</h3><p>说起可以记录的事情，第一个可以想到的就是记账了，账单当然是一个非常有用的可视化管理资产的方式。这里我会推荐使用<strong>Beancount</strong>作为记账软件，实际上严格来说Beancount并不能算是软件，而是一种统计程序，你必须手动编写文本格式的账单才能用Beancount进行统计展示。虽然Beancount是“命令行”程序，但是它有一个好看的网页展示服务<strong>fava</strong>。</p><h3 id="身体健康情况"><a href="#身体健康情况" class="headerlink" title="身体健康情况"></a>身体健康情况</h3><p>相比于金钱，身体健康状况是更重要的一笔数据，毕竟谁也不想，人死了钱还没花完吧。不过更大的可能性是疲于奔命吧。关于这点，可以记录的具体数据有很多，随随便便就可以列出一大堆，身高、体重、体温、心跳、步数、呼吸、血氧、血压、例假等等，反正如果你想探究具体指标，可以去看看体检项目。当然，部分指标的获取还是有些难度的，比如血糖、血脂之类的，如果想要记录可以买一些专业的医疗器材然后对接接口，实现数据流通。不过大部分都可以使用健身环或者手表来获取，甚至某些品牌的手表可以做到心率与专业级的心率检测差不多。</p><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><p>时间是什么，时间就是金钱啊！谁不想向上天再借五百年呢。时间也是有很多记录的点的。比如上下班、上下学、娱乐时间、每天都看电脑多长时间、看手机多长时间、每个软件使用多长时间等等。</p><h3 id="日记"><a href="#日记" class="headerlink" title="日记"></a>日记</h3><p>没想到吧，会出现这个字眼。你不是说不用手动输入的吗？拜托，现在还不是2077年，没法使用全自动的脑机接口好吧。记录日记的主要用途就是，记录一些你觉得有意义的事情，记录本身就是一件很有意义的事，日后分析的时候可以佐证日记来判断当日你为什么那么兴奋。</p><h3 id="知识系统"><a href="#知识系统" class="headerlink" title="知识系统"></a>知识系统</h3><p>知识系统是很重要的，可以整合归档你的知识，当然这部分并不太属于收集这部分，知识系统应该是主动记录并深化提取。</p><h3 id="人际关系"><a href="#人际关系" class="headerlink" title="人际关系"></a>人际关系</h3><p>你可能在想，人际关系有什么好记录的，人生漫长，身边的人来来去去，无所谓的啦。这个取决于个人，喜欢就去记录，不喜欢就可以不记录，这部分推荐使用图关系数据库去处理，非常的方便。</p><p>其实还有很多可以记录的东西，包括但不限于心情、吃得什么饭，有多少大卡的能量。</p><h2 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h2><p>说了这么多，到底如何去实现这些想法呢。一个简便的方法就是找现成的软件。但是要同时满足这么多要求的软件可不好找，同时还需要考虑安全性，我想应该不会有人想把自己的生活起居等等都“开源”到网络上吧。我想可以解决的方式就是：<del>请人来做！</del> 开玩笑哈，如果你非常有钱也不是不可能。但是我这里选择的是自己开发。</p><h3 id="模式选择"><a href="#模式选择" class="headerlink" title="模式选择"></a>模式选择</h3><p>说到了开发软件，第一个要想的事情就是：要开发什么模式的软件，是互联网项目还是本地软件。考虑到要接入的系统很多，数据收集，数据分析。也取决于我不会画UI，所以我选择开发一个互联网项目，这样经过反向代理之后手机也可以快速存入数据。</p><h3 id="编程语言选择"><a href="#编程语言选择" class="headerlink" title="编程语言选择"></a>编程语言选择</h3><p>因为这个需求并不需要高性能，高并发。所以选择我熟悉的<strong>Java</strong>语言来开发。第一是因为现在Java有良好社区环境和大量教程，还有Spring这个终极无敌好用的框架。开发项目可以事半功倍。</p><blockquote><p>最后期待一下日后开发出来的成品，希望可以好用，便捷。（已经创建文件夹了）（笑</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
